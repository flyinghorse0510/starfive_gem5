/*
 * The D2DLink models the connections/protocols
 * between multiple dies. As an example, for
 * Starlink-2.0 each die uses a CHI protocol to 
 * communicate amongst on-chip agents (HNF, RNFs)
 * etc. And a special node, the D2D node is connected
 * to the mesh, which fwds traffic to a different node
 * The D2D node uses a protocol like CXS to communicate
 * amongst multiple dies.
 */

machine(MachineType:D2DNode, "Cross die communication") :
    
    // Arbitration and packing of D2D flits
    D2DPackArb * d2dPackArb;

    // CHI Interface for inter-die communication
    MessageBuffer * reqOut,   network="To", virtual_network="0", vnet_type="none";
    MessageBuffer * snpOut,   network="To", virtual_network="1", vnet_type="none";
    MessageBuffer * rspOut,   network="To", virtual_network="2", vnet_type="none";
    MessageBuffer * datOut,   network="To", virtual_network="3", vnet_type="response";

    MessageBuffer * reqIn,   network="From", virtual_network="0", vnet_type="none";
    MessageBuffer * snpIn,   network="From", virtual_network="1", vnet_type="none";
    MessageBuffer * rspIn,   network="From", virtual_network="2", vnet_type="none";
    MessageBuffer * datIn,   network="From", virtual_network="3", vnet_type="response";

    // CXS Interface for D2D communication
    MessageBuffer * cxsIn;

    MessageBuffer * cxsOut;

    // CHI and CXS widths
    int chi_width_req := 87;

    int chi_width_snp := 101;

    int chi_width_rsp := 67;

    int chi_width_dat := 610;

    int cxs_width := 512;
    
    {

    // States
    state_declaration(State, default="Cache_State_null") {
        I, AccessPermission:Invalid,    desc="Dummy state";
    }

    // Events
    enumeration(Event) {
        AllocRequest,  desc="Allocates an entry";
    }

    // External Declarations
    Tick clockEdge();
    Tick curTick();
    Tick cyclesToTicks(Cycles c);
    Cycles ticksToCycles(Tick t);
    void set_cache_entry(AbstractCacheEntry b);
    void unset_cache_entry();
    void set_tbe(TBE b);
    void unset_tbe();
    MachineID mapAddressToDownstreamMachine(Addr addr);
    MachineID mapAddressToMachine(Addr addr, MachineType mtype);

}

